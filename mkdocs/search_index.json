{
    "docs": [
        {
            "location": "/",
            "text": "Pop\n\n\nClass & Method Description\n\n\n\n\n\nClass Out\n\n\n\n\nClass Description : Output device controlled throught GPIO    \n\n\nExamples Use    \n\n\nOut(n) : Out Object    \n\n\nParams  \n\n    n : GPIO Number Connected to the Output Device    \n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\non()  \n\n    : Set GPIO Connected to Output Device to HIGH    \n\n\noff()  \n\n    : Set GPIO Connected to Output Device to LOW    \n\n\n\n\n\n\n\n\nClass Led\n\n\n\n\nClass Description : LEDs are controlled via GPIO    \n\n\nExample Use    \n\n\nLed(n) : Led Object inheriting from Out Class    \n\n\nParams  \n\n    n : GPIO Number Connected to the LED    \n\n\n\n\n\n\n\n\n\n\n\n\nClass Leds\n\n\n\n\nClass Description : LEDs are controlled via GPIO    \n\n\nExample Use    \n\n\nLeds(n) : Leds Object inheriting from Led Class    \n\n\nParams  \n\n    n : list Number defined board config Connected to the LED    \n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\nallOn()  \n\n    : Set all GPIO Connected to Output Device to HIGH    \n\n\nallOff()  \n\n    : Set all GPIO Connected to Output Device to LOW    \n\n\n\n\n\n\n\n\n \n\n\nClass Input\n\n\n\n\nClass Description : Read the Input Device through GPIO    \n\n\n\n\nExample Use    \n\n\n\n\nInput(n,activeHigh=Ture) : Input Object    \n\n\nParams  \n\n    n : GPIO Number Connected to the Input Device  \n\n    activeHigh : Used to check if the Input Device is HIGH when pressed , Default True\n\n\n\n\n\n\n\n\n\n\n\n\nDefines    \n\n\n\n\nFALLING : Detect Falling Edge    \n\n\nRISING : Detect Rising Edge    \n\n\nBOTH : Detect Both Side    \n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nread() : Read the Input Device Status    \n\n\nsetCallback(func,param=None,type=BOTH) : Set Callback Function When Detect Edge    \n\n\nParams  \n\n    func : Function to use when calling Callback  \n\n    param : Arguments passed to the Callback function , Default None  \n\n    type : Call condition of Callback function , Default BOTH    \n\n\n\n\n\n\n\n\n\n\n\n\nClass Switch\n\n\n\n\nClass Description : Read the switch status through GPIO    \n\n\nExample Use    \n\n\nSwitch(n) : Switch Object inheriting from Input Class    \n\n\nParams  \n\n    n : GPIO Number Connected to the Switch    \n\n\n\n\n\n\n\n\n\n\n\n\nClass Switches\n\n\n\n\nClass Description : Read the switch status through GPIO    \n\n\nExample Use    \n\n\nSwitches(n) : Switch Object inheriting from Input Class    \n\n\nParams  \n\n    n : list Number defined board config Connected to the Switch    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClass SpiAdc\n\n\n\n\nClass Description : adc chip control through spi interface    \n\n\n\n\nExample Use    \n\n\n\n\nSpiAdc(channel, device=0, bus=0, speed=1000000) : SpiAdc object    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)\n\n\n\n\n\n\n\n\n\n\n\n\nDefines    \n\n\n\n\nTYPE_AVERAGE : Average data based on sampling count    \n\n\nTYPE_NORMAL : Unaveraged raw data    \n\n\nMODE_FULL : Call Callback function always    \n\n\nMODE_INCLUSIVE : If data is in arange(max, min), call Callback function    \n\n\nMODE_EXCLUSIVE : If data is over arange, call Callback function    \n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nsetChipSelect(cs) : Set SPI Chip Select PIN    \n\n\nParams  \n\n    cs : Chipselect GPIO for SPI Interface    \n\n\n\n\n\n\nsetCallback(func,param=None,type=TYPE_AVERAGE,mode=MODE_FULL,min=0,max=ADC_MAX) : Set up callback function for automatic data read    \n\n\nParams  \n\n    func : Function to use when calling Callback  \n\n    param : Arguments passed to the Callback function , Default None  \n\n    type : Data Read Type , Default TYPE_AVERAGE  \n\n    mode : Select Mode , Default MODE_FULL  \n\n    min : analog data minimum , Default 0  \n\n    max : analog data maximum , Default 4095 (MCP3208 12bit ADC Chip)    \n\n\n\n\n\n\nsetSample(sample) : Set Sampling Count    \n\n\nParams  \n\n    sample : Sampling count    \n\n\n\n\n\n\ngetSample() : Get Sampling Count    \n\n\nread() : Read Data from Device (Raw Type)    \n\n\nreadAverage() : Read Average Data from Device    \n\n\nreadVolt(ref=3.3,max=3020.0) : Read Data from Device (Voltage Type)    \n\n\nParams  \n\n    ref : Reference Voltage  \n\n    max : Maximum value of raw data    \n\n\n\n\n\n\nreadVoltAverage(ref=3.3,max=3020.0) : Read Data from Device (Voltage Type)    \n\n\nParams  \n\n    ref : Reference Voltage  \n\n    max : Maximum value of raw data    \n\n\n\n\n\n\nrun() : Read data and call Callback function according to mode    \n\n\n\n\n\n\n\n\nClass Psd\n\n\n\n\nClass Description : Distance measurement using PSD sensor    \n\n\n\n\nExample Use    \n\n\n\n\nPsd(channel=-1, device=0, bus=0, speed=1000000) : PSD object inheriting from SpiAdc Class    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)    \n\n\n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\ncalcDist(val,calibration=1.1) : Calculate distance value from raw data    \n\n\nParams  \n\n    val : ADC Raw Data  \n\n    calibration : Calibration Value, Default 1.1    \n\n\n\n\n\n\n\n\n\n\n\n\nClass CDS\n\n\n\n\nClass Description : Light measurement using CDS sensor    \n\n\n\n\nExample Use    \n\n\n\n\nCds(channel=-1, device=0, bus=0, speed=1000000) : Cds object inheriting from SpiAdc Class    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)    \n\n\n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nsetCalibrationPseudoLx(func) : Set calibration function    \n\n\nParams  \n\n    func : Calibration function    \n\n\n\n\n\n\nreadAverage() : Read lux data from device and calibration function    \n\n\n\n\n\n\n\n\nClass Sound\n\n\n\n\nClass Description : Ambient sound measurement using Sound sensor    \n\n\nExample Use    \n\n\nSound(channel=-1, device=0, bus=0, speed=1000000) : Sound object inheriting from SpiAdc Class    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)    \n\n\n\n\n\n\n\n\n\n\n\n\nClass Vr\n\n\n\n\nClass Description : Voltage measurement with variable resistor    \n\n\nExample Use    \n\n\nVr(channel=-1, device=0, bus=0, speed=1000000) : Vr object inheriting from SpiAdc Class    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)    \n\n\n\n\n\n\n\n\n\n\n\n\nClass Potentiometer\n\n\n\n\nClass Description : Voltage measurement with variable resistor    \n\n\n\n\nExample Use    \n\n\n\n\nPotentiometer(channel=-1, device=0, bus=0, speed=1000000) : Potentiometer object inheriting from SpiAdc Class    \n\n\nParams  \n\n    channel : ADC Channel  \n\n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)  \n\n    bus : Not Used..  \n\n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)    \n\n\n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nsetRangeTable(table) : Set potentiometer range table    \n\n\nParams  \n\n    table : Table with 10 elements  \n\n    ex. [48, 300, 700, 1090, 1540, 1945, 2320, 2715, 2980, 3040]    \n\n\n\n\n\n\ngetRangeTable() : return range table    \n\n\nreadAverage() : return level from range table    \n\n\n\n\n\n\n\n\n   \n\n\nClass PiezoBuzzer\n\n\n\n\nClass Description  : PiezoBuzzer controlled via Software PWM    \n\n\n\n\nExample Use    \n\n\n\n\nPiezoBuzzer(n) : PiezoBuzzer object inheriting from PopThread    \n\n\nParams  \n\n    n : GPIO Number Connected to the PiezoBuzzer defined board setting or Can setting manually\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nsetTempo(n) : Set tempo value    \n\n\nParams  \n\n    n : Value to be set to tempo    \n\n\n\n\n\n\ngetTempo() : Get tempo value    \n\n\ntone(scale,pitch,duration) : Play a note on piezo buzzer during duration value    \n\n\nParams  \n\n    scale : Scale value to play on piezo buzzer (int type)  \n\n    pitch : Pitch value to play on piezo buzzer. 'Do' is 1, 'Do\u266f' is 2, 'Re' is 3 and 'Si' is 12  \n\n    duration : Tone is playing during duration value    \n\n\n\n\n\n\nrest(duration) : Stop to play piezo buzzer    \n\n\nParams  \n\n    duration : The duration of the stopping    \n\n\n\n\n\n\nplay(sheet) : play music by sheet    \n\n\nParams  \n\n    sheet : list [[scale],[pitch],[duration]]    \n\n\n\n\n\n\nisPlay() : return play status    \n\n\n\n\n\n\n\n\n\n\n\nClass Oled\n\n\n\n\nClass Description : Oled Controlled vi I2C Interface    \n\n\n\n\nExample Use    \n\n\n\n\nOled( addr=OLED_ADDR, type=OLED_NONE_TYPE, automode=True) : Oled object inheriting from I2C Class (I2c Slave Address -> 0x3c). This function calls init(), clearDisplay()    \n\n\nParams  \n\n    addr : OLED I2C ADDR.default 0x3c  \n\n    type : OLED Type. difined board config  \n\n    automode : select automode. default True\n\n\n\n\n\n\n\n\n\n\n\n\nDefines    \n\n\n\n\nOLED_SSD1306_I2C_128x32 : OLED device type number, if model name is 'SSD1306', select this type    \n\n\nOLED_SH1106_I2C_128x64 : OLED device type number, if model name is 'SSH1106', select this type    \n\n\nBLACK : In OLED, you can use only 2 colors. One of them is black. Numeric value is 0    \n\n\nWHITE : Another of them is white. Numeric value is 1    \n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\ninit(type=OLED_SH1106_I2C_128x64) : Initialize OLED and set width/height of OLED. This function calls setTextSize(), setTextColor(), clearDisplay()    \n\n\nParams  \n\n    type : Select OLED type    \n\n\n\n\n\n\nprint(string) : Print a string on OLED. Replace '\\n' to New-Line    \n\n\nParams  \n\n    string: The string to print on OLED    \n\n\n\n\n\n\ndrawCircle(x0, y0, r, color) : Draw a circle on OLED    \n\n\nParams  \n\n    x0 : Start point of x-axis  \n\n    y0 : Start point of y-axis  \n\n    r : Radious of the circle  \n\n    color : The color of a circle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nfillCircle(x0, y0, r, color) : Draw a filled circle on OLED    \n\n\nParams  \n\n    x0 : Start point of x-axis  \n\n    y0 : Start point of y-axis  \n\n    r : Radious of the circle  \n\n    color : The color of a circle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\ndrawLine(x0, y0, x1, y1, color) : Draw a line on OLED    \n\n\nParams  \n\n    x0 : Start point of x-axis  \n\n    y0 : Start point of y-axis  \n\n    x1 : End point of x-axis  \n\n    y1 : End point of y-axis  \n\n    color : The color of a line. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\ndrawRect(x, y, w, h, color) : Draw a rectangle on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Width of the rectangle  \n\n    h : Height of the rectangle  \n\n    color : The color of a rectangle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nfillRect(x, y, w, h, color) : Draw a filled rectangle on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Width of the rectangle  \n\n    h : Height of the rectangle  \n\n    color : The color of a rectangle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\ndrawVerticalBargraph(x, y, w, h, color, percent) : Draw a graph on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Width of the graph  \n\n    h : Full height of the graph  \n\n    color : The color of the graph. BLACK(0) or WHITE(1)  \n\n    percent : The percentage of a graph. The direction of graph is always up-side    \n\n\n\n\n\n\ndrawHorizontalBargraph(x, y, w, h, color, percent) : Draw a graph on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Full width of the graph  \n\n    h : Height of the graph  \n\n    color : The color of the graph. BLACK(0) or WHITE(1)  \n\n    percent : The percentage of a graph. The direction of graph is always right-side    \n\n\n\n\n\n\ndrawRoundRect(x, y, w, h, r, color) : Draw a rounded rectangle on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Width of the rounded rectangle  \n\n    h : Height of the rounded rectangle  \n\n    r : Curvature of edge of the rounded rectangle  \n\n    color : The color of a graph. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nfillRoundRect(x, y, w, h, r, color) : Draw a rounded and filled rectangle on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    w : Width of the rounded rectangle  \n\n    h : Height of the rounded rectangle  \n\n    r : Curvature of edge of the rounded rectangle  \n\n    color : The color of a graph BLACK(0) or WHITE(1)    \n\n\n\n\n\n\ndrawTriangle(x0, y0, x1, y1, x2, y2, color) : Draw a triangle on OLED    \n\n\nParams  \n\n    x0 : First point of x-axis  \n\n    y0 : First point of y-axis  \n\n    x1 : Second point of x-axis  \n\n    y1 : Second point of y-axis  \n\n    x2 : Third point of x-axis  \n\n    y2 : Third point of y-axis  \n\n    color : The color of a triangle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nfillTriangle(x0, y0, x1, y1, x2, y2, color) : Draw a filled triangle on OLED    \n\n\nParams  \n\n    x0 : First point of x-axis  \n\n    y0 : First point of y-axis  \n\n    x1 : Second point of x-axis  \n\n    y1 : Second point of y-axis  \n\n    x2 : Third point of x-axis  \n\n    y2 : Third point of y-axis  \n\n    color : The color of a triangle. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\ndrawChar(x, y, c, color, bg, size) : Draw a character on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of x-axis  \n\n    c : A character to be drawn  \n\n    color : The color of a character. BLACK(0) or WHITE(1)  \n\n    bg : The background of a character. Background size is 6 * 8 * textsize  \n\n    size : Pixel size of charactor strock. Default is 1    \n\n\n\n\n\n\ndrawBitmap(x, y, bitmap, w, h, color) : Draw a bitmap data on OLED    \n\n\nParams  \n\n    x : Start point of x-axis  \n\n    y : Start point of y-axis  \n\n    bitmap : A two dimensional array which consist of 0 and 1, 0 is black and 1 is white  \n\n    w : Width of bitmap data  \n\n    h : Height of bitmap data  \n\n    color : The color of a character. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nsetCursor(x, y) : Set the cursor on OLED, This value is used in write()    \n\n\nParams  \n\n    x : x-axis point of cursor  \n\n    y : y-axis point of cursor    \n\n\n\n\n\n\nsetTextSize(s) : Set text size, This value is used in write()    \n\n\nParams  \n\n    s : Pixel size of charactor strock. Default is 1    \n\n\n\n\n\n\nsetTextColor(c) : Set text color, This value is used in write()    \n\n\nParams  \n\n    c : Text color value. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nsetTextColorWithBg(c, b) : Set text color and background color, This value is used in write()    \n\n\nParams  \n\n    c : Text color value. BLACK(0) or WHITE(1)  \n\n    b : Background color value. BLACK(0) or WHITE(1)    \n\n\n\n\n\n\nwidth() : Retun widht of OLED    \n\n\nheight() : Return height of OLED    \n\n\ndrawPixel(x, y, color) : Draw a dot on OLED    \n\n\nParams  \n\n    x : The point of a dot  \n\n    y : The point of a dot  \n\n    color : The color of a dot    \n\n\n\n\n\n\nsetBrightness(Brightness) : Set brightness of OLED    \n\n\nParams  \n\n    Brightness : Brightness value to be set    \n\n\n\n\n\n\ninvertDisplay(i) : Change display mode    \n\n\nParams  \n\n    i : If i is True, dispaly mode is Inverse mode but if i is False, display mode is Normal mode. In Inverse mode, 0 is white and 1 is black    \n\n\n\n\n\n\nistartscrollright(start, stop) : Scroll the screen in the row-right direction, Scroll method isn't working in OLED_SH1106_I2C_128x64    \n\n\nParams  \n\n    start : Start point of scrolling  \n\n    stop : Stop point of scrolling    \n\n\n\n\n\n\nstartscrollleft(start, stop) : Scroll the screen in the row-left direction, Scroll method isn't working in OLED_SH1106_I2C_128x64    \n\n\nParams  \n\n    start : Start point of scrolling  \n\n    stop : Stop point of scrolling    \n\n\n\n\n\n\nstartscrolldiagright(start, stop) : Scroll the screen in the column-right direction, Scroll method isn't working in OLED_SH1106_I2C_128x64    \n\n\nParams  \n\n    start : Start point of scrolling  \n\n    stop : Stop point of scrolling    \n\n\n\n\n\n\nstartscrolldiagleft(start, stop) : Scroll the screen in the column-left direction, Scroll method isn't working in OLED_SH1106_I2C_128x64    \n\n\nParams  \n\n    start : Start point of scrolling  \n\n    stop : Stop point of scrolling    \n\n\n\n\n\n\nstopscroll() : Stop scrolling the screen    \n\n\ndisplay() : Display buffer data on OLED    \n\n\nclearDisplay() : Clear the data on OLED    \n\n\nwrite(c) : Write the character at location of cursor on OLED    \n\n\nParams  \n\n    c : The character to be written    \n\n\n\n\n\n\nsetAutomode(automode) : set automode    \n\n\nParams  \n\n    automode : True or False    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClass Gesture\n\n\n\n\nClass Description : Apds9960 Controlled via I2C Interface    \n\n\n\n\nExample Use    \n\n\n\n\nGesture(addr=APDS9960_ADDR) : Gesture object inheriting from I2C Class (I2c Slave Address -> 0x39)    \n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nisAvailable() : return Gesture detection status(1). Wait until Gesture is detected    \n\n\nread() : return number as Gesture status.  \n\n    0 : \"None\" , 1 : \"Left\", 2 : \"Right\", 3 : \"Up\", 4 : \"Down\", 5: \"Near\", 6 : \"Far\"    \n\n\nreadStr() : return String as Gesture status.  \n\n    \"None\" , \"Left\", \"Right\", \"Up\", \"Down\", \"Near\", \"Far\"    \n\n\n\n\n\n\n\n\nInner class Light    \n\n\n\n\nLight() : Light object    \n\n\nFunctions    \n\n\nread() : return light value    \n\n\n\n\n\n\n\n\n\n\n\n\nInner class Color    \n\n\n\n\nColor() : Color object    \n\n\nFunctions    \n\n\nreadRed() : return Red value    \n\n\nreadGreen() : return Green value    \n\n\nreadBlue() : return Blue value    \n\n\n\n\n\n\n\n\n\n\nInner class Proximity    \n\n\nProximity() : Proximity object    \n\n\nFunctions    \n\n\nread() : return Proximity value    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClass PixelDisplay\n\n\n\n\n\n\nClass Description : Pixel Display controlled via Hardware PWM    \n\n\n\n\nPixelDisplay(width=8, height=8, gpio=-1, type=GRB, dma=10, automode=True, debug=False) : PixelDisplay object    \n\n\nParams  \n\n    width : Number of Pixel width  \n\n    height : Number of Pixel height  \n\n    automode : automode setting. True/False\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions    \n\n\n\n\nfill(color_arr) : Fill PixelDisplay to one color    \n\n\nParams  \n\n    color_arr : A color to be filled. Type is list of [R, G, B]    \n\n\n\n\n\n\nclear() : clear PixelDisplay    \n\n\nsetColor(x, y, color_arr) : set PixelDisplay color_arr on x,y    \n\n\nParams  \n\n    x : x-axis  \n\n    y : y-axis  \n\n    color_arr : A color to be set. Type is list of [R, G, B] or HEX (0xRRGGBB)    \n\n\n\n\n\n\ngetColor(x, y) : return color on x,y as INT type    \n\n\nParams  \n\n    x : x-axis  \n\n    y : y-axis    \n\n\n\n\n\n\nsetAutomode(automode) : set automode. default True. if False set, shuld use display()    \n\n\nParams  \n\n    automode : True or False    \n\n\n\n\n\n\nrainbow() : display rainbow color on Pixel Display    \n\n\nsetBrightness(brightness) : set Brightness    \n\n\nParams  \n\n    brightness : brightness (0~255)    \n\n\n\n\n\n\ndisplay() : send command from buffer. when Automode False use    \n\n\ngetRGBType() : getRGBType    \n\n\nRGBtoHEX(color_arr) : convert RGB list data to HEX    \n\n\nsetColorInvert(invert) : inver color. default False    \n\n\nParams  \n\n    invert = True : input (255,0,0) -> (0,255,255)  \n\n    invert = False : input (255,0,0) -> (255,0,0)",
            "title": "Home"
        },
        {
            "location": "/#pop",
            "text": "",
            "title": "Pop"
        },
        {
            "location": "/#class-method-description",
            "text": "",
            "title": "Class &amp; Method Description"
        },
        {
            "location": "/#class-out",
            "text": "Class Description : Output device controlled throught GPIO      Examples Use      Out(n) : Out Object      Params   \n    n : GPIO Number Connected to the Output Device          Functions      on()   \n    : Set GPIO Connected to Output Device to HIGH      off()   \n    : Set GPIO Connected to Output Device to LOW",
            "title": "Class Out"
        },
        {
            "location": "/#class-led",
            "text": "Class Description : LEDs are controlled via GPIO      Example Use      Led(n) : Led Object inheriting from Out Class      Params   \n    n : GPIO Number Connected to the LED",
            "title": "Class Led"
        },
        {
            "location": "/#class-leds",
            "text": "Class Description : LEDs are controlled via GPIO      Example Use      Leds(n) : Leds Object inheriting from Led Class      Params   \n    n : list Number defined board config Connected to the LED          Functions      allOn()   \n    : Set all GPIO Connected to Output Device to HIGH      allOff()   \n    : Set all GPIO Connected to Output Device to LOW",
            "title": "Class Leds"
        },
        {
            "location": "/#class-input",
            "text": "Class Description : Read the Input Device through GPIO       Example Use       Input(n,activeHigh=Ture) : Input Object      Params   \n    n : GPIO Number Connected to the Input Device   \n    activeHigh : Used to check if the Input Device is HIGH when pressed , Default True       Defines       FALLING : Detect Falling Edge      RISING : Detect Rising Edge      BOTH : Detect Both Side         Functions       read() : Read the Input Device Status      setCallback(func,param=None,type=BOTH) : Set Callback Function When Detect Edge      Params   \n    func : Function to use when calling Callback   \n    param : Arguments passed to the Callback function , Default None   \n    type : Call condition of Callback function , Default BOTH",
            "title": "Class Input"
        },
        {
            "location": "/#class-switch",
            "text": "Class Description : Read the switch status through GPIO      Example Use      Switch(n) : Switch Object inheriting from Input Class      Params   \n    n : GPIO Number Connected to the Switch",
            "title": "Class Switch"
        },
        {
            "location": "/#class-switches",
            "text": "Class Description : Read the switch status through GPIO      Example Use      Switches(n) : Switch Object inheriting from Input Class      Params   \n    n : list Number defined board config Connected to the Switch",
            "title": "Class Switches"
        },
        {
            "location": "/#class-spiadc",
            "text": "Class Description : adc chip control through spi interface       Example Use       SpiAdc(channel, device=0, bus=0, speed=1000000) : SpiAdc object      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)       Defines       TYPE_AVERAGE : Average data based on sampling count      TYPE_NORMAL : Unaveraged raw data      MODE_FULL : Call Callback function always      MODE_INCLUSIVE : If data is in arange(max, min), call Callback function      MODE_EXCLUSIVE : If data is over arange, call Callback function         Functions       setChipSelect(cs) : Set SPI Chip Select PIN      Params   \n    cs : Chipselect GPIO for SPI Interface        setCallback(func,param=None,type=TYPE_AVERAGE,mode=MODE_FULL,min=0,max=ADC_MAX) : Set up callback function for automatic data read      Params   \n    func : Function to use when calling Callback   \n    param : Arguments passed to the Callback function , Default None   \n    type : Data Read Type , Default TYPE_AVERAGE   \n    mode : Select Mode , Default MODE_FULL   \n    min : analog data minimum , Default 0   \n    max : analog data maximum , Default 4095 (MCP3208 12bit ADC Chip)        setSample(sample) : Set Sampling Count      Params   \n    sample : Sampling count        getSample() : Get Sampling Count      read() : Read Data from Device (Raw Type)      readAverage() : Read Average Data from Device      readVolt(ref=3.3,max=3020.0) : Read Data from Device (Voltage Type)      Params   \n    ref : Reference Voltage   \n    max : Maximum value of raw data        readVoltAverage(ref=3.3,max=3020.0) : Read Data from Device (Voltage Type)      Params   \n    ref : Reference Voltage   \n    max : Maximum value of raw data        run() : Read data and call Callback function according to mode",
            "title": "Class SpiAdc"
        },
        {
            "location": "/#class-psd",
            "text": "Class Description : Distance measurement using PSD sensor       Example Use       Psd(channel=-1, device=0, bus=0, speed=1000000) : PSD object inheriting from SpiAdc Class      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)           Functions       calcDist(val,calibration=1.1) : Calculate distance value from raw data      Params   \n    val : ADC Raw Data   \n    calibration : Calibration Value, Default 1.1",
            "title": "Class Psd"
        },
        {
            "location": "/#class-cds",
            "text": "Class Description : Light measurement using CDS sensor       Example Use       Cds(channel=-1, device=0, bus=0, speed=1000000) : Cds object inheriting from SpiAdc Class      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)           Functions       setCalibrationPseudoLx(func) : Set calibration function      Params   \n    func : Calibration function        readAverage() : Read lux data from device and calibration function",
            "title": "Class CDS"
        },
        {
            "location": "/#class-sound",
            "text": "Class Description : Ambient sound measurement using Sound sensor      Example Use      Sound(channel=-1, device=0, bus=0, speed=1000000) : Sound object inheriting from SpiAdc Class      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)",
            "title": "Class Sound"
        },
        {
            "location": "/#class-vr",
            "text": "Class Description : Voltage measurement with variable resistor      Example Use      Vr(channel=-1, device=0, bus=0, speed=1000000) : Vr object inheriting from SpiAdc Class      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)",
            "title": "Class Vr"
        },
        {
            "location": "/#class-potentiometer",
            "text": "Class Description : Voltage measurement with variable resistor       Example Use       Potentiometer(channel=-1, device=0, bus=0, speed=1000000) : Potentiometer object inheriting from SpiAdc Class      Params   \n    channel : ADC Channel   \n    device : SPI Interface Channel , Default 0 (in Raspberry Pi)   \n    bus : Not Used..   \n    speed : SPI Interface Clock Speed , Default 1000000(1MHz)           Functions       setRangeTable(table) : Set potentiometer range table      Params   \n    table : Table with 10 elements   \n    ex. [48, 300, 700, 1090, 1540, 1945, 2320, 2715, 2980, 3040]        getRangeTable() : return range table      readAverage() : return level from range table",
            "title": "Class Potentiometer"
        },
        {
            "location": "/#class-piezobuzzer",
            "text": "Class Description  : PiezoBuzzer controlled via Software PWM       Example Use       PiezoBuzzer(n) : PiezoBuzzer object inheriting from PopThread      Params   \n    n : GPIO Number Connected to the PiezoBuzzer defined board setting or Can setting manually       Functions       setTempo(n) : Set tempo value      Params   \n    n : Value to be set to tempo        getTempo() : Get tempo value      tone(scale,pitch,duration) : Play a note on piezo buzzer during duration value      Params   \n    scale : Scale value to play on piezo buzzer (int type)   \n    pitch : Pitch value to play on piezo buzzer. 'Do' is 1, 'Do\u266f' is 2, 'Re' is 3 and 'Si' is 12   \n    duration : Tone is playing during duration value        rest(duration) : Stop to play piezo buzzer      Params   \n    duration : The duration of the stopping        play(sheet) : play music by sheet      Params   \n    sheet : list [[scale],[pitch],[duration]]        isPlay() : return play status",
            "title": "Class PiezoBuzzer"
        },
        {
            "location": "/#class-oled",
            "text": "Class Description : Oled Controlled vi I2C Interface       Example Use       Oled( addr=OLED_ADDR, type=OLED_NONE_TYPE, automode=True) : Oled object inheriting from I2C Class (I2c Slave Address -> 0x3c). This function calls init(), clearDisplay()      Params   \n    addr : OLED I2C ADDR.default 0x3c   \n    type : OLED Type. difined board config   \n    automode : select automode. default True       Defines       OLED_SSD1306_I2C_128x32 : OLED device type number, if model name is 'SSD1306', select this type      OLED_SH1106_I2C_128x64 : OLED device type number, if model name is 'SSH1106', select this type      BLACK : In OLED, you can use only 2 colors. One of them is black. Numeric value is 0      WHITE : Another of them is white. Numeric value is 1         Functions       init(type=OLED_SH1106_I2C_128x64) : Initialize OLED and set width/height of OLED. This function calls setTextSize(), setTextColor(), clearDisplay()      Params   \n    type : Select OLED type        print(string) : Print a string on OLED. Replace '\\n' to New-Line      Params   \n    string: The string to print on OLED        drawCircle(x0, y0, r, color) : Draw a circle on OLED      Params   \n    x0 : Start point of x-axis   \n    y0 : Start point of y-axis   \n    r : Radious of the circle   \n    color : The color of a circle. BLACK(0) or WHITE(1)        fillCircle(x0, y0, r, color) : Draw a filled circle on OLED      Params   \n    x0 : Start point of x-axis   \n    y0 : Start point of y-axis   \n    r : Radious of the circle   \n    color : The color of a circle. BLACK(0) or WHITE(1)        drawLine(x0, y0, x1, y1, color) : Draw a line on OLED      Params   \n    x0 : Start point of x-axis   \n    y0 : Start point of y-axis   \n    x1 : End point of x-axis   \n    y1 : End point of y-axis   \n    color : The color of a line. BLACK(0) or WHITE(1)        drawRect(x, y, w, h, color) : Draw a rectangle on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Width of the rectangle   \n    h : Height of the rectangle   \n    color : The color of a rectangle. BLACK(0) or WHITE(1)        fillRect(x, y, w, h, color) : Draw a filled rectangle on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Width of the rectangle   \n    h : Height of the rectangle   \n    color : The color of a rectangle. BLACK(0) or WHITE(1)        drawVerticalBargraph(x, y, w, h, color, percent) : Draw a graph on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Width of the graph   \n    h : Full height of the graph   \n    color : The color of the graph. BLACK(0) or WHITE(1)   \n    percent : The percentage of a graph. The direction of graph is always up-side        drawHorizontalBargraph(x, y, w, h, color, percent) : Draw a graph on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Full width of the graph   \n    h : Height of the graph   \n    color : The color of the graph. BLACK(0) or WHITE(1)   \n    percent : The percentage of a graph. The direction of graph is always right-side        drawRoundRect(x, y, w, h, r, color) : Draw a rounded rectangle on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Width of the rounded rectangle   \n    h : Height of the rounded rectangle   \n    r : Curvature of edge of the rounded rectangle   \n    color : The color of a graph. BLACK(0) or WHITE(1)        fillRoundRect(x, y, w, h, r, color) : Draw a rounded and filled rectangle on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    w : Width of the rounded rectangle   \n    h : Height of the rounded rectangle   \n    r : Curvature of edge of the rounded rectangle   \n    color : The color of a graph BLACK(0) or WHITE(1)        drawTriangle(x0, y0, x1, y1, x2, y2, color) : Draw a triangle on OLED      Params   \n    x0 : First point of x-axis   \n    y0 : First point of y-axis   \n    x1 : Second point of x-axis   \n    y1 : Second point of y-axis   \n    x2 : Third point of x-axis   \n    y2 : Third point of y-axis   \n    color : The color of a triangle. BLACK(0) or WHITE(1)        fillTriangle(x0, y0, x1, y1, x2, y2, color) : Draw a filled triangle on OLED      Params   \n    x0 : First point of x-axis   \n    y0 : First point of y-axis   \n    x1 : Second point of x-axis   \n    y1 : Second point of y-axis   \n    x2 : Third point of x-axis   \n    y2 : Third point of y-axis   \n    color : The color of a triangle. BLACK(0) or WHITE(1)        drawChar(x, y, c, color, bg, size) : Draw a character on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of x-axis   \n    c : A character to be drawn   \n    color : The color of a character. BLACK(0) or WHITE(1)   \n    bg : The background of a character. Background size is 6 * 8 * textsize   \n    size : Pixel size of charactor strock. Default is 1        drawBitmap(x, y, bitmap, w, h, color) : Draw a bitmap data on OLED      Params   \n    x : Start point of x-axis   \n    y : Start point of y-axis   \n    bitmap : A two dimensional array which consist of 0 and 1, 0 is black and 1 is white   \n    w : Width of bitmap data   \n    h : Height of bitmap data   \n    color : The color of a character. BLACK(0) or WHITE(1)        setCursor(x, y) : Set the cursor on OLED, This value is used in write()      Params   \n    x : x-axis point of cursor   \n    y : y-axis point of cursor        setTextSize(s) : Set text size, This value is used in write()      Params   \n    s : Pixel size of charactor strock. Default is 1        setTextColor(c) : Set text color, This value is used in write()      Params   \n    c : Text color value. BLACK(0) or WHITE(1)        setTextColorWithBg(c, b) : Set text color and background color, This value is used in write()      Params   \n    c : Text color value. BLACK(0) or WHITE(1)   \n    b : Background color value. BLACK(0) or WHITE(1)        width() : Retun widht of OLED      height() : Return height of OLED      drawPixel(x, y, color) : Draw a dot on OLED      Params   \n    x : The point of a dot   \n    y : The point of a dot   \n    color : The color of a dot        setBrightness(Brightness) : Set brightness of OLED      Params   \n    Brightness : Brightness value to be set        invertDisplay(i) : Change display mode      Params   \n    i : If i is True, dispaly mode is Inverse mode but if i is False, display mode is Normal mode. In Inverse mode, 0 is white and 1 is black        istartscrollright(start, stop) : Scroll the screen in the row-right direction, Scroll method isn't working in OLED_SH1106_I2C_128x64      Params   \n    start : Start point of scrolling   \n    stop : Stop point of scrolling        startscrollleft(start, stop) : Scroll the screen in the row-left direction, Scroll method isn't working in OLED_SH1106_I2C_128x64      Params   \n    start : Start point of scrolling   \n    stop : Stop point of scrolling        startscrolldiagright(start, stop) : Scroll the screen in the column-right direction, Scroll method isn't working in OLED_SH1106_I2C_128x64      Params   \n    start : Start point of scrolling   \n    stop : Stop point of scrolling        startscrolldiagleft(start, stop) : Scroll the screen in the column-left direction, Scroll method isn't working in OLED_SH1106_I2C_128x64      Params   \n    start : Start point of scrolling   \n    stop : Stop point of scrolling        stopscroll() : Stop scrolling the screen      display() : Display buffer data on OLED      clearDisplay() : Clear the data on OLED      write(c) : Write the character at location of cursor on OLED      Params   \n    c : The character to be written        setAutomode(automode) : set automode      Params   \n    automode : True or False",
            "title": "Class Oled"
        },
        {
            "location": "/#class-gesture",
            "text": "Class Description : Apds9960 Controlled via I2C Interface       Example Use       Gesture(addr=APDS9960_ADDR) : Gesture object inheriting from I2C Class (I2c Slave Address -> 0x39)         Functions       isAvailable() : return Gesture detection status(1). Wait until Gesture is detected      read() : return number as Gesture status.   \n    0 : \"None\" , 1 : \"Left\", 2 : \"Right\", 3 : \"Up\", 4 : \"Down\", 5: \"Near\", 6 : \"Far\"      readStr() : return String as Gesture status.   \n    \"None\" , \"Left\", \"Right\", \"Up\", \"Down\", \"Near\", \"Far\"         Inner class Light       Light() : Light object      Functions      read() : return light value           Inner class Color       Color() : Color object      Functions      readRed() : return Red value      readGreen() : return Green value      readBlue() : return Blue value          Inner class Proximity      Proximity() : Proximity object      Functions      read() : return Proximity value",
            "title": "Class Gesture"
        },
        {
            "location": "/#class-pixeldisplay",
            "text": "Class Description : Pixel Display controlled via Hardware PWM       PixelDisplay(width=8, height=8, gpio=-1, type=GRB, dma=10, automode=True, debug=False) : PixelDisplay object      Params   \n    width : Number of Pixel width   \n    height : Number of Pixel height   \n    automode : automode setting. True/False       Functions       fill(color_arr) : Fill PixelDisplay to one color      Params   \n    color_arr : A color to be filled. Type is list of [R, G, B]        clear() : clear PixelDisplay      setColor(x, y, color_arr) : set PixelDisplay color_arr on x,y      Params   \n    x : x-axis   \n    y : y-axis   \n    color_arr : A color to be set. Type is list of [R, G, B] or HEX (0xRRGGBB)        getColor(x, y) : return color on x,y as INT type      Params   \n    x : x-axis   \n    y : y-axis        setAutomode(automode) : set automode. default True. if False set, shuld use display()      Params   \n    automode : True or False        rainbow() : display rainbow color on Pixel Display      setBrightness(brightness) : set Brightness      Params   \n    brightness : brightness (0~255)        display() : send command from buffer. when Automode False use      getRGBType() : getRGBType      RGBtoHEX(color_arr) : convert RGB list data to HEX      setColorInvert(invert) : inver color. default False      Params   \n    invert = True : input (255,0,0) -> (0,255,255)   \n    invert = False : input (255,0,0) -> (255,0,0)",
            "title": "Class PixelDisplay"
        },
        {
            "location": "/Ai/",
            "text": "Pop.Ai",
            "title": "Ai"
        },
        {
            "location": "/Ai/#popai",
            "text": "",
            "title": "Pop.Ai"
        },
        {
            "location": "/Pilot/",
            "text": "Pop.Pilot",
            "title": "Pilot"
        },
        {
            "location": "/Pilot/#poppilot",
            "text": "",
            "title": "Pop.Pilot"
        }
    ]
}